If you can run your program interactively, and your program has access
to a console, then it's pretty likely that you're going to spend much
of your debugging time adding print statements to your program and
modules. Unless you're diagnosing an issue in a running production
service, printing is the fastest and simplest way to start figuring
out what's wrong with your program.

Node includes some basic functions for output, not all of which are
well-known:

  console.log(arguments): print to standard output
  console.error(arguments): print to standard error

Two things to know about these functions:

1. You can pass as many comma-separated parameters to them as you
   like, and the results will be printed separated by spaces.
2. The parameters to the call are passed to Node's util.format(),
   so you can use %s (for strings), %d (for numbers), and %j (for
   objects, passed through JSON.stringify()), just as you would
   in a call to util.format().

For debugging, there are a few more useful methods:

  console.dir(object): call util.inspect() on `object`, print results
  console.trace(label): dump stacktrace at line trace is called, with label
  console.time(label) / console.timeEnd(label): quick & dirty benchmarking
  console.assert(expression, arguments): assert that expression is true

In day-to-day debugging, console.error, console.dir and console.trace
are the most useful of these functions. They will give you the why,
the what, and the where without requiring a bunch of extra effort.

The following program should console.log the value of a file, BUT IT DOESN'T.

    var fs = require("fs");

    var peach = function (obj) {

        console.log(obj);
    }

    var bowser = function (callback) {

        fs.readFile(process.cwd() + "/problems/console/object.json", callback);
    }

    bowser(koopa);

    var koopa = function (err, file) {

        if (err) {
            //NOOOOOO
        }

        peach(JSON.parse(file));
    }

Use a combination of console functions to sort out what's up and fix it.